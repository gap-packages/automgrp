%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Chapter{Properties and operations with group and semigroup elements}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Creation of tree automorphisms and homomorphisms}

\Declaration{TreeAutomorphism}
\Declaration{Representative}
%Declaration{AutomFamily}


In the examples below we will consider the elements of the lamplighter and Basilica groups. First 
we define them as
\beginexample
gap> G:=AutomatonGroup("a=(a,b)(1,2),b=(a,b)");
< a, b >
gap> Basilica:=AutomatonGroup("u=(v,1)(1,2),v=(u,1)");
< u, v >
\endexample

Note also that these groups are predefined in a global variable `AG_Groups' (see "Some predefined groups").


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Properties and attributes of tree automorphisms and homomorphisms}

\Declaration{IsSphericallyTransitive}[treehom]
\Declaration{IsTransitiveOnLevel}[treehom]

\>IsOne( <a> ) O

Returns whether automorphism <a> acs trivially on the tree. For contracting groups see also 
`UseContraction' ("UseContraction") and `IsOneContr' ("IsOneContr").
\beginexample
gap> IsOne(b*a^-1*b*a^-1);
true
\endexample

\Declaration{IsOneContr}


\>Order( <a> ) O

Computes the order of automorphism <a>. In some cases does not stop. Works always (modulo memory 
restrictions) for groups generated by bounded automata.

If `InfoLevel' of `InfoAutomGrp' is greater than or equal to 3 (one can set it by 
`SetInfoLevel( InfoAutomGrp, 3)') and an element has infinite order, then the proof of this fact 
is printed.

\beginexample
gap> Order(a*b^-1);
2
gap> SetInfoLevel( InfoAutomGrp, 3);
gap> Order( u^35*v^-12*u^2*v^-3 );
#I  (u^35*v^-12*u^2*v^-3)^68719476736 has congutate of u^2*v^-3*u^35*v^
-12 as a section at vertex [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
infinity
\endexample

\Declaration{OrderUsingSections}

\Declaration{Perm}
\Declaration{PermOnLevel}
\Declaration{PermOnLevelAsMatrix}
\Declaration{TransformationOnLevel}
\Declaration{Word}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Operations with tree automorphisms and homomorphisms}

The multiplication of tree homomorphisms is defined in the standard way 

\>`<a> \* <b>'{product}!{for tree homomorphisms}

The following operations allow to compute the actions of tree homomorphisms on letters and vertices

\>`<letter> ^ <a>'{action}!{of tree homomorphism on letter}
\>`<vertex> ^ <a>'{action}!{of tree homomorphism on vertex}

\beginexample
gap> 1^a;
2
gap> [1,2,2,1,2,1]^(a*b^2);
[ 2, 1, 2, 2, 1, 2 ]
\endexample


The operations below describe how to work with sections of tree homomorphisms.

\Declaration{Section}
\Declaration{Sections}
\Declaration{Decompose}





\>`<a> in <G>'{in}

Returns whether automorphism <a> belongs to group <G>. In some cases does not stop.
\beginexample
gap> H:=Group([a^2,b^2]);
< a^2, b^2 >
gap> a in H;
false
\endexample



\Declaration{OrbitOfVertex}
\Declaration{PrintOrbitOfVertex}
\Declaration{PermActionOnLevel}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Elements of groups and semigroups defined by wreath recursion}

\Declaration{IsFiniteState}[selfsim]
\Declaration{AllSections}

See also operation `MealyAutomaton' ("MealyAutomaton"), which allows to construct 
a Mealy automaton whose states are the sections of given tree homomorphism and which
encodes its action on the tree.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{Elements of contracting groups}

\Declaration{AutomPortrait}
%Declaration{AutomPortraitBoundary}
%Declaration{AutomPortraitDepth}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
