utilsfrgrp.gd:
  DeclareOperation("ReducedListOfWordsByNielsen", [IsAssocWordCollection]);
  DeclareOperation("ReducedListOfWordsByNielsenBack", [IsAssocWordCollection]);
  DeclareOperation("ReducedByNielsen", [IsObject]);
  DeclareOperation("ApplyNielsen", [IsObject]);
  DeclareGlobalFunction("ComputeMihaylovSystemPairs");

utils.gd:
  DeclareOperation("CalculateWord", [IsAssocWord, IsList]);
  DeclareOperation("CalculateWords", [IsList, IsList]);
  DeclareGlobalFunction("ReducedSphericalIndex");
  DeclareGlobalFunction("IsEqualSphericalIndex");
  DeclareGlobalFunction("TopDegreeInSphericalIndex");
  DeclareGlobalFunction("DegreeOfLevelInSphericalIndex");
  DeclareGlobalFunction("TreeLevelTuples");
  DeclareGlobalFunction("ParseAutomatonString");
  BindGlobal("$AutomataAbelImageIndeterminate", Indeterminate(GF(2), "x"));
  BindGlobal("AutomataAbelImageSpherTrans",
  DeclareGlobalFunction("AbelImageAutomatonInList");

treeautobj.gd:
  DeclareCategory("IsTreeAutObject", IsObject);
  DeclareAttribute("SphericalIndex", IsTreeAutObject);
  DeclareAttribute("TopDegreeOfTree", IsTreeAutObject);
  DeclareOperation("DegreeOfLevel", [IsTreeAutObject, IsPosInt]);
  DeclareProperty("IsActingOnHomogeneousTree", IsTreeAutObject);
  DeclareAttribute("DegreeOfTree", IsTreeAutObject);
  DeclareProperty("IsActingOnBinaryTree", IsTreeAutObject);
  DeclareProperty("IsSphericallyTransitive", IsTreeAutObject);
  DeclareOperation("IsTransitiveOnLevel", [IsTreeAutObject, IsPosInt]);
  DeclareFilter("CanEasilyTestSphericalTransitivity");
  DeclareOperation("FixesVertex", [IsTreeAutObject, IsObject]);
  DeclareOperation("FixesLevel", [IsTreeAutObject, IsPosInt]);
  DeclareAttribute("FirstMovedLevel", IsTreeAutObject);
  DeclareAttribute("AbelImage", IsTreeAutObject);

treeautgrp.gd:
  DeclareSynonym("IsTreeAutomorphismGroup", IsGroup and IsTreeAutomorphismCollection);
  DeclareOperation("TreeAutomorphismGroup", [IsTreeAutomorphismGroup, IsPermGroup]);
  DeclareProperty("IsSelfSimilar", IsTreeAutomorphismGroup and IsActingOnHomogeneousTree);
  DeclareFilter("CanEasilyTestSelfSimilarity");
  DeclareProperty("IsFractal", IsTreeAutomorphismGroup);
  DeclareProperty("IsContracting", IsTreeAutomorphismGroup);
  DeclareAttribute("StabilizerOfFirstLevel", IsTreeAutomorphismGroup);
  KeyDependentOperation("StabilizerOfLevel", IsTreeAutomorphismGroup, IsPosInt, ReturnTrue);
  DeclareOperation("StabilizerOfVertex", [IsTreeAutomorphismGroup, IsObject]);
  KeyDependentOperation("Projection", IsTreeAutomorphismGroup, IsPosInt, ReturnTrue);
  DeclareOperation("ProjectionNC", [IsTreeAutomorphismGroup, IsObject]);
  DeclareOperation("ProjStab", [IsTreeAutomorphismGroup, IsObject]);
  DeclareOperation("$SubgroupOnLevel", [IsTreeAutomorphismGroup,
                                        IsList and IsTreeAutomorphismCollection,
                                        IsPosInt]);
  DeclareOperation("$SimplifyGenerators", [IsList and IsTreeAutomorphismCollection]);
  KeyDependentOperation("PermGroupOnLevel", IsTreeAutomorphismGroup, IsPosInt, ReturnTrue);
  DeclareProperty("IsAmenable", IsTreeAutomorphismGroup);

treeaut.gd:
  DeclareCategory("IsTreeAutomorphism", IsTreeAutObject and
                                        IsMultiplicativeElementWithInverse and
                                        IsAssociativeElement);
  DeclareCategoryFamily("IsTreeAutomorphism");
  DeclareCategoryCollections("IsTreeAutomorphism");
  DeclareOperation("TreeAutomorphismFamily", [IsObject]);
  DeclareOperation("TreeAutomorphism", [IsList, IsPerm]);
  DeclareOperation("Perm", [IsTreeAutomorphism, IsPosInt]);
  KeyDependentOperation("PermOnLevel", IsTreeAutomorphism, IsPosInt, ReturnTrue);
  DeclareOperation("State", [IsTreeAutomorphism, IsList]);
  DeclareOperation("States", [IsTreeAutomorphism]);
  DeclareOperation("Expand", [IsTreeAutomorphism, IsPosInt]);

selfs.gd:
  DeclareAttribute( "AutomNucleus", IsTreeAutomorphismGroup, "mutable" );
  DeclareAttribute( "NucleusIncludingGeneratingSet", IsTreeAutomorphismGroup, "mutable" );
  DeclareAttribute( "NucleusIncludingGeneratingSetAutom", IsTreeAutomorphismGroup, "mutable" );
  DeclareAttribute( "ContractingLevel", IsTreeAutomorphismGroup, "mutable" );
  DeclareAttribute( "ContractingTable", IsTreeAutomorphismGroup, "mutable" );
  DeclareAttribute( "_ContractingTable", IsTreeAutomorphismGroup, "mutable" );
  DeclareAttribute( "UseContraction", IsTreeAutomorphismGroup, "mutable");
  DeclareAttribute( "MINIMIZED_AUTOMATON_LIST", IsTreeAutomorphismGroup, "mutable" );
  DeclareGlobalFunction("CONVERT_ASSOCW_TO_LIST");
  DeclareAttribute( "INFO_FLAG", IsTreeAutomorphismGroup, "mutable" );
  DeclareGlobalFunction("ReduceWord");
  DeclareGlobalFunction("ProjectWord");
  DeclareGlobalFunction("WordActionOnFirstLevel");
  DeclareGlobalFunction("WordActionOnVertex");
  DeclareOperation("OrbitOfVertex",[IsList,IsAutomaton]);
  DeclareOperation("OrbitOfVertex",[IsList,IsAutomaton,IsCyclotomic]);
  DeclareOperation("PrintOrbitOfVertex",[IsList,IsAutomaton]);
  DeclareOperation("PrintOrbitOfVertex",[IsList,IsAutomaton,IsCyclotomic]);
  DeclareGlobalFunction("IsOneWordSelfSim");
  DeclareGlobalFunction("IsOneWordContr");
  DeclareGlobalFunction("IS_ONE_LIST");
  DeclareGlobalFunction("IsOneContr");
  DeclareGlobalFunction("CHOOSE_AUTOMATON_LIST");
  DeclareGlobalFunction("PowerOfWord");
  DeclareOperation("ORDER_OF_ELEMENT",[IsList,IsList]);
  DeclareOperation("ORDER_OF_ELEMENT",[IsList,IsList,IsCyclotomic]);
  DeclareGlobalFunction("GeneratorActionOnVertex");
  DeclareGlobalFunction("_NumberOfVertex");
  DeclareGlobalFunction("NumberOfVertex");
  DeclareGlobalFunction("_VertexNumber");
  DeclareGlobalFunction("VertexNumber");
  DeclareGlobalFunction("GeneratorActionOnLevel");
  DeclareGlobalFunction("PermActionOnLevel");
  DeclareGlobalFunction("WordActionOnLevel");
  DeclareGlobalFunction("_IsWordTransitiveOnLevel");
  DeclareGlobalFunction("_GeneratorActionOnLevelAsMatrix");
  DeclareGlobalFunction("PermOnLevelAsMatrix");
  DeclareGlobalFunction("InvestigatePairs");
  DeclareGlobalFunction("MinimizeAutom");
  DeclareGlobalFunction("MinimizeAutomTrack");
  DeclareGlobalFunction("AddInverses");
  DeclareGlobalFunction("AddInversesTrack");
  DeclareOperation("FindNucleus",[IsAutomatonGroup]);
  DeclareOperation("FindNucleus",[IsAutomatonGroup, IsCyclotomic]);
  DeclareGlobalFunction("InversePerm");
  DeclareGlobalFunction("_AutomPortraitMain");
  DeclareGlobalFunction("AutomPortrait");
  DeclareGlobalFunction("AutomPortraitBoundary");
  DeclareGlobalFunction("AutomPortraitDepth");
  DeclareGlobalFunction("AutomGroupGrowth");
  DeclareGlobalFunction("AutomGroupGrowthFast");
  DeclareGlobalFunction("AutomGroupElements");
  DeclareOperation("_FiniteGroupId",[IsAutomGroup]);
  DeclareOperation("_FiniteGroupId",[IsAutomGroup,IsCyclotomic]);
  DeclareGlobalFunction("MarkovOperator");
  DeclareGlobalFunction("IsOneWordSubs");
  DeclareOperation("FindRelsSubs", [IsList, IsList]);
  DeclareOperation("FindRelsSubs", [IsList, IsList, IsCyclotomic]);
  DeclareOperation("FindRelsSubs", [IsList, IsList, IsCyclotomic, IsCyclotomic]);
  DeclareOperation("FindRelsSubsSG", [IsList, IsList]);
  DeclareOperation("FindRelsSubsSG", [IsList, IsList, IsCyclotomic]);
  DeclareOperation("FindRelsSubsSG", [IsList, IsList, IsCyclotomic, IsCyclotomic]);
  DeclareOperation("FindRels", [IsAutomGroup]);
  DeclareOperation("FindRels", [IsAutomGroup, IsCyclotomic]);
  DeclareOperation("FindRels", [IsAutomGroup, IsCyclotomic, IsCyclotomic]);
  DeclareOperation("ORDER_USING_SECTIONS",[IsAutom]);
  DeclareOperation("ORDER_USING_SECTIONS",[IsAutom,IsCyclotomic]);
  DeclareGlobalFunction("SUSPICIOUS_FOR_NONCONTRACTION");
  DeclareGlobalFunction("FindGroupElement");
  DeclareGlobalFunction("FindGroupElements");
  DeclareGlobalFunction("FindElementOfInfiniteOrder");
  DeclareGlobalFunction("FindElementsOfInfiniteOrder");
  DeclareGlobalFunction("IsNoncontracting");
  DeclareGlobalFunction("OrdersOfGroupElementsMain");
  DeclareGlobalFunction("OrdersOfGroupElements");
  DeclareGlobalFunction("PeriodicityGuess");
  DeclareGlobalFunction("FindTransitiveElements");

scilab.gd:
  DeclareGlobalFunction("PlotSpectraPermsInScilab");
  DeclareOperation("PlotSpectraInScilabAddInverses", [IsObject, IsPosInt, IsPosInt]);

rws.gd:
  DeclareCategory("IsFARewritingSystem", IsRewritingSystem and IsBuiltFromGroup);
  DeclareOperation("FARewritingSystem", [IsPosInt]);
  DeclareOperation("FARewritingSystem", [IsPosInt, IsObject]);
  DeclareOperation("AddRule", [IsFARewritingSystem, IsObject]);
  DeclareOperation("AddRule", [IsFARewritingSystem, IsObject, IsBool]);
  DeclareOperation("AddRules", [IsFARewritingSystem, IsObject]);
  DeclareOperation("AddRules", [IsFARewritingSystem, IsObject, IsBool]);
  DeclareOperation("SetRwRules", [IsFARewritingSystem, IsObject]);
  DeclareOperation("FARewritingSystem", [IsAutomFamily]);
  DeclareOperation("UseFARewritingSystem", [IsAutomFamily, IsBool]);

listops.gd:
  DeclareGlobalFunction("IsCorrectAutomatonList");
  DeclareGlobalFunction("InverseAutomatonList");
  DeclareGlobalFunction("ConnectedStatesInList");
  DeclareGlobalFunction("IsTrivialStateInList");
  DeclareGlobalFunction("AreEquivalentStatesInList");
  DeclareGlobalFunction("AreEquivalentStatesInLists");
  DeclareGlobalFunction("ReducedAutomatonInList");
  DeclareGlobalFunction("MinimalSubAutomatonInlist");
  DeclareGlobalFunction("PermuteStatesInList");
  DeclareGlobalFunction("ImageOfVertexInList");
  DeclareGlobalFunction("WordStateInList");
  DeclareGlobalFunction("WordStateAndPermInList");
  DeclareGlobalFunction("DiagonalActionInList");
  DeclareGlobalFunction("MultAlphabetInList");
  DeclareGlobalFunction("HasDualInList");
  DeclareGlobalFunction("HasDualOfInverseInList");
  DeclareGlobalFunction("DualAutomatonList");

automgroup.gd:
  DeclareSynonym("IsAutomGroup", IsGroup and IsAutomCollection);
  DeclareOperation("AutomGroup", [IsList]);
  DeclareOperation("AutomGroupNoBindGlobal", [IsList]);
  DeclareAttribute("UnderlyingAutomFamily", IsAutomGroup);
  DeclareProperty("IsGroupOfAutomFamily", IsAutomGroup);
  InstallTrueMethod(IsSelfSimilar, IsGroupOfAutomFamily);
  DeclareProperty("IsFractalByWords", IsAutomGroup);
  InstallTrueMethod(IsFractal, IsFractalByWords);
  DeclareAttribute("MihaylovSystem", IsAutomGroup, "mutable");
  DeclareAttribute("UnderlyingFreeSubgroup", IsAutomGroup, "mutable");
  DeclareAttribute("UnderlyingFreeGenerators", IsAutomGroup, "mutable");
  DeclareAttribute("UnderlyingFreeGroup", IsAutomGroup);
  DeclareAttribute("IndexInFreeGroup", IsAutomGroup, "mutable");
  DeclareAttribute("LevelOfFaithfulAction", IsAutomGroup and IsSelfSimilar);
  DeclareProperty("IsAutomatonGroup", IsAutomGroup);
  InstallTrueMethod(IsGroupOfAutomFamily, IsAutomatonGroup);
  DeclareProperty("IsGeneratedByAutomatonOfPolynomialGrowth", IsAutomatonGroup);
  DeclareProperty("IsGeneratedByBoundedAutomaton", IsAutomatonGroup);
  DeclareAttribute("PolynomialDegreeOfGrowthOfAutomaton", IsAutomatonGroup);

automfam.gd:
  DeclareOperation("AutomFamily", [IsList, IsList]);
  DeclareOperation("AutomFamilyNoBindGlobal", [IsList, IsList]);
  DeclareAttribute("DualAutomFamily", IsAutomFamily);
  DeclareAttribute("One", IsAutomFamily);
  DeclareOperation("ComputedRelatorsOfAutomFamily", [IsAutomFamily]);
  DeclareAttribute("AbelImagesGenerators", IsAutomFamily);
  DeclareAttribute("GroupOfAutomFamily", IsAutomFamily);
  KeyDependentOperation("DiagonalAction", IsAutomFamily, IsPosInt, ReturnTrue);
  KeyDependentOperation("MultAutomAlphabet", IsAutomFamily, IsPosInt, ReturnTrue);
  DeclareAttribute("GeneratorsOfOrderTwo", IsAutomFamily);

autom.gd:
  DeclareCategory("IsAutom", IsAutomaton);
  DeclareCategoryCollections("IsAutom");
  DeclareCategoryFamily("IsAutom");
  DeclareOperation("Word", [IsObject]);
  DeclareOperation("Word", [IsGroup, IsGroup]);
  DeclareOperation("Autom", [IsAssocWord, IsAutomFamily]);
  DeclareOperation("StatesWords", [IsAutom]);
