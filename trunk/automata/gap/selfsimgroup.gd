#############################################################################
##
#W  selfsimgroup.gd           automgrp package                 Yevgen Muntyan
#W                                                             Dmytro Savchuk
##  automgrp v 0.91 started June 07 2004
##
#Y  Copyright (C) 2003-2007 Yevgen Muntyan, Dmytro Savchuk
##


#############################################################################
##
#C  IsSelfSimGroup
##
##  The category of groups generated by finite invertible initial automata
##  (elements from category `IsSelfSim').
##
DeclareSynonym("IsSelfSimGroup", IsSelfSimCollection and IsGroup);
InstallTrueMethod(IsTreeAutomorphismCollection, IsSelfSimGroup);
InstallTrueMethod(IsInvertibleSelfSimCollection, IsSelfSimGroup);


#############################################################################
##
#O  SelfSimilarGroup( <string>[, <bind_vars>] )
#O  SelfSimilarGroup( <list>[, <names>, <bind_vars>] )
#O  SelfSimilarGroup( <automaton>[, <bind_vars>] )
##
##  Creates the self-similar group generated by finite automaton, described by <string>
##  or <list>, or given as an argument <automaton>.
##
##  The <string> is a conventional notation of the form
##  `name1 = (name11, name12, ..., name1d)perm1, name2 = ...'
##  where each `name\*' is a name of state or `1', and each `perm\*' is a
##  permutation written in {\GAP} notation. Trivial permutations may be
##  omitted. This function ignores whitespace, and states may be separated
##  by commas or semicolons.
##
##  The <list> is a list consisting of $n$ entries corresponding to $n$ states of automaton.
##  Each entry is of the form $[a_1,\.\.\.,a_d,p]$,
##  where $d \geq 2$ is the size of the alphabet the group acts on, $a_i$ are `IsInt' in
##  $\{1,\ldots,n\}$ and
##  represent the sections of corresponding state at all vertices of the first level of the tree;
##  and all $p$ is in `SymmetricalGroup(<d>)' describes the action of the corresponding state on the
##  alphabet.
##
##  Optional <names> must be a list of names of generators of the group, corresponding to the
##  states of automaton.
##  These names are used to display elements of resulted group.
##
##  If optional <bind_vars> is `false' the names of generators of the group are not assigned
##  to the global variables. The default value is `true'. One can use
##  `AssignGeneratorVariables' function to assign these names later, if they were not assigned
##  when the group was created.
##
##  \beginexample
##  gap> SelfSimilarGroup("a = (a, b), b = (a, b)(1,2)");
##  < a, b >
##  gap> SelfSimilarGroup("a=(b, a, 1)(2,3), b=(1, a, b)(1,2,3)");
##  < a, b >
##  \endexample
##
##  These operations accept also optional boolean argument <bind_vars>, which tells
##  whether to asign generators of the group to \GAP variables.
##  \beginexample
##  gap> SelfSimilarGroup("t = (1, t)(1,2)", false);;
##  gap> t;
##  Variable: 't' must have a value
##
##  gap> SelfSimilarGroup("t = (1, t)(1,2)", true);;
##  gap> t;
##  t
##  \endexample
##
DeclareOperation("SelfSimilarGroup", [IsList]);
DeclareOperation("SelfSimilarGroup", [IsList, IsList]);
DeclareOperation("SelfSimilarGroup", [IsList, IsBool]);
DeclareOperation("SelfSimilarGroup", [IsList, IsList, IsBool]);


#############################################################################
##
#P  IsGroupOfSelfSimFamily( <G> )
##
##  Whether group <G> is the whole group generated by the automaton used to
##  construct elements of <G>.
##
DeclareProperty("IsGroupOfSelfSimFamily", IsSelfSimGroup);
InstallTrueMethod(IsSelfSimilar, IsGroupOfSelfSimFamily);


#############################################################################
##
#P  IsFractalByWords(<G>)
##
##  Computes the generators of stabilizers of vertices of the first level
##  and their projections on these vertices. Returns `true' if  the preimages of these
##  projections in the free group under canonical epimorphism generate the whole free
##  group for each stabilizer, and the <G> acts transitively on the first level.
##  This is sufficient but not necessary condition for <G> to be fractal. See also
##  `IsFractal' ("IsFractal").
DeclareProperty("IsFractalByWords", IsSelfSimGroup);
InstallTrueMethod(IsFractal, IsFractalByWords);


#############################################################################
##
#A  UnderlyingFreeSubgroup(<G>)
##
DeclareAttribute("UnderlyingFreeSubgroup", IsSelfSimGroup, "mutable");


#############################################################################
##
#A  IndexInFreeGroup(<G>)
##
DeclareAttribute("IndexInFreeGroup", IsSelfSimGroup, "mutable");


###############################################################################
##
#A  LevelOfFaithfulAction (<G>)
#A  LevelOfFaithfulAction (<G>, <max_lev>)
##
##  For a given finite self-similar group <G> determines the smallest level of
##  the tree, where <G> acts faithfully, i.e. the stabilizer of this level in <G>
##  is trivial. The idea here is that for self-similar group all nontrivial level
##  stabilizers are different. If <max_lev> is given it finds only first <max_lev>
##  quotients by stabilizers and if all of them have different size returns `fail'.
##  If <G> is infinite and <max_lev> is not specified will loop forever.
##
##  See also `IsomorphismPermGroup' ("IsomorphismPermGroup").
##  \beginexample
##  gap> H:=SelfSimilarGroup("a=(a,a)(1,2),b=(a,a),c=(b,a)(1,2)");
##  < a, b, c >
##  gap> LevelOfFaithfulAction(H);
##  3
##  gap> LevelOfFaithfulAction(AddingMachine,10);
##  fail
##  \endexample
##
DeclareAttribute("LevelOfFaithfulAction", IsSelfSimGroup and IsSelfSimilar);


#############################################################################
##
#P  IsSelfSimilarGroup (<G>)
##
##  is `true' if generators of <G> coincide with generators
##  of `GroupOfSelfSimFamily(UnderlyingSelfSimFamily(<G>))', which
##  means that the <G> is generated by the states of underlying automaton
##  and generators of <G> correspond to the states of this automaton.
DeclareProperty("IsSelfSimilarGroup", IsSelfSimGroup);
InstallTrueMethod(IsGroupOfSelfSimFamily, IsSelfSimilarGroup);


#############################################################################
##
#A  MihailovaSystem(<G>)
##
DeclareAttribute("MihailovaSystem", IsSelfSimGroup, "mutable");




#E
