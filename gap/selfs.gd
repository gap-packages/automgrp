#############################################################################
##
#W  selfs.gd             automata package                      Yevgen Muntyan
#W                                                             Dmytro Savchuk
##  automata v 0.91 started June 07 2004
##
#Y  Copyright (C) 2003-2006 Yevgen Muntyan, Dmytro Savchuk
##


################################################################################
##
#F ReduceWord . . . . . . . . . . . . . . . . . . . . . . .cuts 1s from the word
##
DeclareGlobalFunction("ReduceWord");


################################################################################
##
#F ProjectWord. . . . . . . . . . . . . . . .computes the projection of the word
##                                     onto a subtree #s in a self-similar group
DeclareGlobalFunction("ProjectWord");


################################################################################
##
#F WordActionOnFirstLevel . . . . . . . . . . . .computes the permutation of the
##          first level vertices generated by an element of a self-similar group
DeclareGlobalFunction("WordActionOnFirstLevel");


################################################################################
##
#F WordActionOnVertex . . . . . . . . . . . . . computes the image of the vertex
##                        under the action of an element of a self-similar group
DeclareGlobalFunction("WordActionOnVertex");


################################################################################
##
#O OrbitOfVertex . . . .Computes the first n elements of the orbit of vertex ver
##                                   under the element w of self-similat group G
DeclareOperation("OrbitOfVertex",[IsList,IsAutomaton]);
#DeclareOperation("OrbitOfVertex",[IsList,IsAutomaton,IsPosInt]);

################################################################################
##
#F IsOneWordSelfSim. . . . . . . . . . . . . . . . checks if the word is trivial
##                             in any self-similar group (exponential algorithm)
DeclareGlobalFunction("IsOneWordSelfSim");

################################################################################
##
#F IsOneWordContr. . . . . . . . . . . . . . . . . checks if the word is trivial
##                                                          in contracting group
DeclareGlobalFunction("IsOneWordContr");


################################################################################
##
#F IsOneWord. . . . . . . . . . . . . . . . . . . .checks if the word is trivial
##                     in any self-similar group (chooses appropriate algorithm)
DeclareGlobalFunction("IsOneWord");

################################################################################
##
#F PowerOfWord. . . . . . . . . . . . . . . . . . Construct n-th power of a given word
##                                                It is NOT sophisticated at all (Do I use it at all???)
DeclareGlobalFunction("PowerOfWord");


################################################################################
##
#O OrderOfElement. . . . . . . . . Tries to find the order of a periodic element
##                                                       Checks up to order size

DeclareOperation("OrderOfElement",[IsList,IsList]);
#DeclareOperation("OrderOfElement",[IsList,IsList,IsPosInt]);
#DeclareOperation("OrderOfElement",[IsList,IsList,IsInfinity]);


################################################################################
##
#F GeneratorActionOnVertex. . . . . . . . . . . . . . . . Computes the action of
##                                             the generator on the fixed vertex
DeclareGlobalFunction("GeneratorActionOnVertex");


################################################################################
##
#F NumberOfWord. . . . . . . . . . . . . . .Computes the number (1..d^Length(w))
##                                           of a given vertex w of a d-ary tree
DeclareGlobalFunction("NumberOfWord");


################################################################################
##
#F VertexNumber. . . . . . . . . . . . . Constructs the vertex on the n-th level
##                                               of the d-ary tree with number k
DeclareGlobalFunction("VertexNumber");


################################################################################
##
#F GeneratorActionOnLevel . . . . . . . . . . . . . . . . Computes the action of
##                                               the generator on the n-th level
DeclareGlobalFunction("GeneratorActionOnLevel");


################################################################################
##
#F WordActionOnLevel . . . . . . . . . . . . . . . . . . .Computes the action of
##                                              the given word on the n-th level
DeclareGlobalFunction("WordActionOnLevel");


################################################################################
##
#F ShowOrbitOfVertex . . . .Computes the first n elements of the orbit of vertex ver
##                                   under the element w of self-similat group G

DeclareGlobalFunction("ShowOrbitOfVertex");



################################################################################
##
#F IsWordTransitiveOnLevel. . . . . . . . . .Returns true if element w of G acts
##                                 transitively on level lev and false otherwise
DeclareGlobalFunction("IsWordTransitiveOnLevel");



################################################################################
##
#F GeneratorActionOnLevelAsMatrix. . . . . . . . . . . . . Computes the action of
##                       the generator on the n-th level as permutational matrix
DeclareGlobalFunction("GeneratorActionOnLevelAsMatrix");


################################################################################
##
#F NthFactor  . . . . . . . . . . . . . . . . . .Computes Factor group G/St_n(G)
##
DeclareGlobalFunction("NthFactor");


################################################################################
##
#F SubgroupNthFactor  . . . . . . . . . . . . . .Computes Factor group H/St_n(H)
##                     for a subgroup H of G generated by words from a list gens
DeclareGlobalFunction("SubgroupNthFactor");


################################################################################
##
#F InvestigatePairs . . . . . . . . . . . . . . . . . . . Searches out relations
##                                               in the recurent group like ab=c
DeclareGlobalFunction("InvestigatePairs");


################################################################################
##
#F ContractingLevel . . . . . . . . . . . . . . . . . . Computes the level where
##                                              all pairs contract to the kernel
DeclareGlobalFunction("ContractingLevel");


################################################################################
##
#F ContractingTable . . . . . . . . . . . . . . . . . . Computes the contracting
##                                                           table of the kernel
DeclareGlobalFunction("ContractingTable");


################################################################################
##
#F MinimizeAutom . . . . . . . . . . . . . . . . . . .Glues equivalent states of
##                                                          noninitial automaton
DeclareGlobalFunction("MinimizeAutom");


################################################################################
##
#F MinimizeAutomTrack  . . . . . . . . . . . . . . . .Glues equivalent states of
##   noninitial automaton and returns correspondence between old and new numbers
##  track_list_short - new generators in terms of old ones
##  track_list_long  - old generators in terms of new ones
DeclareGlobalFunction("MinimizeAutomTrack");


################################################################################
##
#F AddInverses. . . . . . . . . . Adds to the generating set of the self-similar
##                               group inverse elements and the identity element
DeclareGlobalFunction("AddInverses");


################################################################################
##
#F AddInversesTrack. . . . . . . .Adds to the generating set of the self-similar
##                               group inverse elements and the identity element
DeclareGlobalFunction("AddInversesTrack");


################################################################################
##
#F FindNucleus. . . . . . . . . . . . . . . . . . . . .Tries to find the nucleus
##                                                     of the self-similar group
DeclareGlobalFunction("FindNucleus");


################################################################################
##
#F InversePerm. . . . . . . . . . . .Gives permutation on the set of generators
##                                      which pushes each element to its inverse
DeclareGlobalFunction("InversePerm");


################################################################################
##
#F PortraitOfWord. . . . . . . . . . . . . . . Finds the portrait boundary of an
##                                                element in a contracting group
DeclareGlobalFunction("PortraitOfWord");


################################################################################
##
#F WritePortraitToFile. . . . . . . . . . .Writes portrait in a file in the form
##                                                       understandable by Maple
DeclareGlobalFunction("WritePortraitToFile");


################################################################################
##
#F WritePortraitsToFile. . . . . . . . . . . . .Writes portraitso of elements of
##                          a list in a file in the form understandable by Maple

DeclareGlobalFunction("WritePortraitsToFile");


################################################################################
##
#F PortraitsOfWordPowers. . . . . . Finds the sequence of portrait boundaries of
##                                          word's powers in a contracting group
DeclareGlobalFunction("PortraitsOfWordPowers");


################################################################################
##
#F AutomGroupGrowth. . . . . . . . . . . . . . . . . . . . . . . .Finds number of elements
##                                                         of the length up to n
DeclareGlobalFunction("AutomGroupGrowth");


################################################################################
##
#F AutomGroupGrowthFast. . . . . . . . . .Computes the growth function while the number of
##               elements is not greater than n and length is not greater than m
DeclareGlobalFunction("AutomGroupGrowthFast");


################################################################################
##
#F AutomGroupElements . . . . . . . . . . . . . . . . . . .Enumerates all elements of
##                                     a self-similar group up to a given length
DeclareGlobalFunction("AutomGroupElements");


################################################################################
##
#O FiniteGroupId . . . . . . . . . . Computes a finite group of permutations
##    generated by a self-similar group (in case of infinite group doesn't stop)
DeclareOperation("FiniteGroupId",[IsList]);
DeclareOperation("FiniteGroupId",[IsList,IsCyclotomic]);


################################################################################
##
#F MarkovOperator. . . . . . . . . . . . . .Computes a matrix of Markov operator
##                                related to group G on the n-th level of a tree
DeclareGlobalFunction("MarkovOperator");


################################################################################
##
#F IsOneWordSubs. . . . . . . . . . . . Determines if the word in terms of given
##                                                         generators is trivial
DeclareGlobalFunction("IsOneWordSubs");


################################################################################
##
#F FindRelsSubs. . . . . . . . . . . .Finds relations between given elements
##                                     stops after investigating "size" elements
##                                      or when it finds "num_of_rels" relations
DeclareOperation("FindRelsSubs",[IsList,IsList,IsAutomGroup]);
DeclareOperation("FindRelsSubs",[IsList,IsList,IsAutomGroup,IsCyclotomic]);
DeclareOperation("FindRelsSubs",[IsList,IsList,IsAutomGroup,IsCyclotomic,IsCyclotomic]);


################################################################################
##
#F FindRelsSubsSG. . . . . . . . . . .Finds relations between given elements
##                                         in the subsemigroup generated by them
##                                     stops after investigating "size" elements
##                                     and when it finds "num_of_rels" relations
DeclareOperation("FindRelsSubsSG",[IsList,IsList,IsAutomGroup]);
DeclareOperation("FindRelsSubsSG",[IsList,IsList,IsAutomGroup,IsCyclotomic]);
DeclareOperation("FindRelsSubsSG",[IsList,IsList,IsAutomGroup,IsCyclotomic,IsCyclotomic]);


################################################################################
##
#F FindRels . . . . . . . . . Fing relatoins in terms of the original generators
##
##
DeclareOperation("FindRels",[IsAutomGroup]);
DeclareOperation("FindRels",[IsAutomGroup,IsCyclotomic]);
DeclareOperation("FindRels",[IsAutomGroup,IsCyclotomic,IsCyclotomic]);


################################################################################
##
#F OrdersOfGroupElementsMain . . . . . Enumerates all elements of a self-similar
##             group up to length n and tries to find their orders up to order O
##                  returns true if all the orders are finite and fail otherwise
##         in case stop=true returns fail as soon as it finds suspicious element
DeclareGlobalFunction("OrdersOfGroupElementsMain");


################################################################################
##
#F OrdersOfGroupElements . . . . . . . Enumerates all elements of a self-similar
##             group up to length n and tries to find their orders up to order O
##                  returns true if all the orders are finite and fail otherwise
DeclareGlobalFunction("OrdersOfGroupElements");


################################################################################
##
#F PeriodicityGuess. . . . . . . . . . Enumerates all elements of a self-similar
##             group up to length n and tries to find their orders up to order O
##                  returns true if all the orders are finite and fail otherwise
##                           returns fail as soon as it finds suspicious element
DeclareGlobalFunction("PeriodicityGuess");


################################################################################
##
#F FindTransitiveElements . . . . . . .Finds all elements of a group G which are
##                      transitive on a level lev and have length no more than n
##                in case stop=true stops when it finds first transitive element
DeclareGlobalFunction("FindTransitiveElements");
